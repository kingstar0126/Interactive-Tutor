name: Deploy to AWS ECS

on:
  push:
    branches:
      - production-v2
env:
  BUILD_RUN_ID: ${{github.run_number}}

  ## backend
  MAIL_USERNAME: ${{secrets.PRODUCTION_MAIL_USERNAME}}
  MAIL_PASSWORD: ${{secrets.PRODUCTION_MAIL_PASSWORD}}
  STRIPE_SECRET_KEY: ${{secrets.PRODUCTION_STRIPE_SECRET_KEY}}
  PINECONE_API_KEY: ${{secrets.PRODUCTION_PINECONE_API_KEY}}
  PINECONE_ENV: ${{secrets.PRODUCTION_PINECONE_ENV}}
  OPENAI_API_KEY: ${{secrets.PRODUCTION_OPENAI_API_KEY}}
  OPENAI_API_KEY_PRO: ${{secrets.PRODUCTION_OPENAI_API_KEY_PRO}}
  PINECONE_INDEX_NAME: ${{secrets.PRODUCTION_PINECONE_INDEX_NAME}}
  SECRET_KEY: ${{secrets.PRODUCTION_SECRET_KEY}}
  STRIPE_PUBLISHABLE_KEY: ${{secrets.PRODUCTION_STRIPE_PUBLISHABLE_KEY}}
  GOOGLE_API: ${{secrets.PRODUCTION_GOOGLE_API}}
  GOOGLE_CX: ${{secrets.PRODUCTION_GOOGLE_CX}}
  TAX_RATE_ID: ${{secrets.PRODUCTION_TAX_RATE_ID}}
  COUPON: ${{secrets.PRODUCTION_COUPON}}
  TOP_UP_QUERY_PRICE: ${{secrets.PRODUCTION_TOP_UP_QUERY_PRICE}}
  SENDGRID_MAIL: ${{secrets.PRODUCTION_SENDGRID_MAIL}}
  SENDGRID_API_KEY: ${{secrets.PRODUCTION_SENDGRID_API_KEY}}
  SENDGRID_RESET_PASSWORD_TEMPLATE_ID: ${{secrets.PRODUCTION_SENDGRID_RESET_PASSWORD_TEMPLATE_ID}}
  SENDGRID_FREE_TRIAL_LIST_ID: ${{secrets.PRODUCTION_SENDGRID_FREE_TRIAL_LIST_ID}}
  SENDGRID_FREE_TRIAL_END_LIST_ID: ${{secrets.PRODUCTION_SENDGRID_FREE_TRIAL_END_LIST_ID}}
  SENDGRID_SUBSCRIPTION_USERS_LIST_ID: ${{secrets.PRODUCTION_SENDGRID_SUBSCRIPTION_USERS_LIST_ID}}
  SENDGRID_ENTERPRISE_USERS_LIST_ID: ${{secrets.PRODUCTION_SENDGRID_ENTERPRISE_USERS_LIST_ID}}
  E2B_API_KEY: ${{secrets.PRODUCTION_E2B_API_KEY}}
  DATABASE_CONNECTION_STRING: ${{secrets.PRODUCTION_DATABASE_CONNECTION_STRING}}
  BE_SERVER_URL: ${{secrets.PRODUCTION_BE_SERVER_URL}}

  AWS_REGION: eu-west-2
  ECR_REPOSITORY: 987025303706.dkr.ecr.eu-west-2.amazonaws.com/interactive-tutor-prod-backend
  ECS_SERVICE: interactive-tutor-prod-backend-service 
  ECS_CLUSTER: interactive-tutor-prod-ecs-cluster
  CONTAINER_NAME: interactive-tutor-prod-backend-td

  REGION: ${{secrets.PRODUCTION_S3_REGION}}
  ACCESS_KEY_ID: ${{secrets.PRODUCTION_S3_ACCESS_KEY_ID}}
  ACCESS_SECRET_KEY: ${{secrets.PRODUCTION_S3_ACCESS_SECRET_KEY}}
  S3_PUBLIC: ${{secrets.PRODUCTION_S3_PUBLIC}}
  S3_PRIVATE: ${{secrets.PRODUCTION_S3_PRIVATE}}
  
  ## frontend
  REACT_APP_SERVER_URL: ${{secrets.PRODUCTION_REACT_APP_SERVER_URL}}
  REACT_APP_EMBED_SERVER_URL: ${{secrets.PRODUCTION_REACT_APP_EMBED_SERVER_URL}}
  REACT_APP_GOOGLE_MAP_API: ${{secrets.PRODUCTION_REACT_APP_GOOGLE_MAP_API}}
  REACT_APP_STRIPE_PUBLISH_KEY: ${{secrets.PRODUCTION_REACT_APP_STRIPE_PUBLISH_KEY}}

jobs:
  deploy-backend-to-aws-ecs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Prepare Backend Application
      run: |
        cd backend/project/
        echo "MAIL_USERNAME=${{env.MAIL_USERNAME}}" >> .env
        echo "MAIL_PASSWORD=${{env.MAIL_PASSWORD}}" >> .env
        echo "STRIPE_SECRET_KEY=${{env.STRIPE_SECRET_KEY}}" >> .env
        echo "PINECONE_API_KEY=${{env.PINECONE_API_KEY}}" >> .env
        echo "PINECONE_ENV=${{env.PINECONE_ENV}}" >> .env
        echo "OPENAI_API_KEY=${{env.OPENAI_API_KEY}}" >> .env
        echo "OPENAI_API_KEY_PRO=${{env.OPENAI_API_KEY_PRO}}" >> .env
        echo "PINECONE_INDEX_NAME=${{env.PINECONE_INDEX_NAME}}" >> .env
        echo "SECRET_KEY=${{env.SECRET_KEY}}" >> .env
        echo "STRIPE_PUBLISHABLE_KEY=${{env.STRIPE_PUBLISHABLE_KEY}}" >> .env
        echo "GOOGLE_API=${{env.GOOGLE_API}}" >> .env
        echo "GOOGLE_CX=${{env.GOOGLE_CX}}" >> .env
        echo "TAX_RATE_ID=${{env.TAX_RATE_ID}}" >> .env
        echo "COUPON=${{env.COUPON}}" >> .env
        echo "TOP_UP_QUERY_PRICE=${{env.TOP_UP_QUERY_PRICE}}" >> .env
        echo "SENDGRID_MAIL=${{env.SENDGRID_MAIL}}" >> .env
        echo "SENDGRID_API_KEY=${{env.SENDGRID_API_KEY}}" >> .env
        echo "SENDGRID_RESET_PASSWORD_TEMPLATE_ID=${{env.SENDGRID_RESET_PASSWORD_TEMPLATE_ID}}" >> .env
        echo "SENDGRID_FREE_TRIAL_LIST_ID=${{env.SENDGRID_FREE_TRIAL_LIST_ID}}" >> .env
        echo "SENDGRID_FREE_TRIAL_END_LIST_ID=${{env.SENDGRID_FREE_TRIAL_END_LIST_ID}}" >> .env
        echo "SENDGRID_SUBSCRIPTION_USERS_LIST_ID=${{env.SENDGRID_SUBSCRIPTION_USERS_LIST_ID}}" >> .env
        echo "SENDGRID_ENTERPRISE_USERS_LIST_ID=${{env.SENDGRID_ENTERPRISE_USERS_LIST_ID}}" >> .env
        echo "E2B_API_KEY=${{env.E2B_API_KEY}}" >> .env
        echo "DATABASE_CONNECTION_STRING=${{env.DATABASE_CONNECTION_STRING}}" >> .env
        echo "SERVER_URL=${{env.BE_SERVER_URL}}" >> .env

        echo "REGION=${{env.REGION}}" >> .env
        echo "ACCESS_KEY_ID=${{env.ACCESS_KEY_ID}}" >> .env
        echo "ACCESS_SECRET_KEY=${{env.ACCESS_SECRET_KEY}}" >> .env
        echo "S3_PUBLIC=${{env.S3_PUBLIC}}" >> .env
        echo "S3_PRIVATE=${{env.S3_PRIVATE}}" >> .env

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # - name: Upload .env file as artifact
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: env-file
    #     path: ./backend/project/.env

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
        cd ./backend/
        docker pull $ECR_REPOSITORY:$IMAGE_TAG
        DOCKER_BUILDKIT=1 docker build --cache-from $ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ./backend/task-definition-production.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    # # Notify Github Channel for Build Process
    # - name: Notify Slack
    #   uses: ravsamhq/notify-slack-action@v1
    #   if: always()
    #   with:
    #     status: ${{ job.status }}
    #     notification_title: '{workflow} has {status_message}'
    #     message_format: '{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}>'
    #     footer: '<{repo_url}|{repo}>'
    #     notify_when: 'success,failure,warnings'
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-frontend-to-aws-s3-cloudfront:
     runs-on: ubuntu-latest
 
     steps:
       - name: Checkout
         uses: actions/checkout@v2
 
       - name: Use Node.js
         uses: actions/setup-node@v3
         with:
           node-version: '18'
 
       - name:  Prepare Env's for FE Application
         run: |
            cd frontend
            echo "REACT_APP_SERVER_URL=${{env.REACT_APP_SERVER_URL}}" >> .env
            echo "REACT_APP_EMBED_SERVER_URL=${{env.REACT_APP_EMBED_SERVER_URL}}" >> .env
            echo "REACT_APP_GOOGLE_MAP_API=${{env.REACT_APP_GOOGLE_MAP_API}}" >> .env
            echo "REACT_APP_STRIPE_PUBLISH_KEY=${{env.REACT_APP_STRIPE_PUBLISH_KEY}}" >> .env

            echo "REACT_APP_REGION=${{env.REGION}}" >> .env
            echo "REACT_APP_ACCESS_KEY_ID=${{env.ACCESS_KEY_ID}}" >> .env
            echo "REACT_APP_ACCESS_SECRET_KEY=${{env.ACCESS_SECRET_KEY}}" >> .env
            echo "REACT_APP_S3_PUBLIC=${{env.S3_PUBLIC}}" >> .env
            echo "REACT_APP_S3_PRIVATE=${{env.S3_PRIVATE}}" >> .env
 
       - name: Configure AWS credentials
         uses: aws-actions/configure-aws-credentials@v1
         with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           aws-region: ${{ env.AWS_REGION }}
 
       - name: Install Npm dependencies, Linting and create build
         run: |
           cd frontend
           yarn install
           export NODE_OPTIONS="--max_old_space_size=4096"
           TSC_COMPILE_ON_ERROR=true yarn build
 
       - name: Deploy to S3
         run: |
           cd frontend
           aws s3 sync ./build s3://interactive-tutor-prod-app-bucket/
           aws cloudfront create-invalidation --distribution-id E1AHLAHI7MTPUT --paths "/*"


          # # Notify Github Channel for Build Process
          # - name: Notify Slack
          #   uses: ravsamhq/notify-slack-action@v1
          #   if: always()
          #   with:
          #     status: ${{ job.status }}
          #     notification_title: '{workflow} has {status_message}'
          #     message_format: '{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}>'
          #     footer: '<{repo_url}|{repo}>'
          #     notify_when: 'success,failure,warnings'
          #   env:
          #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}